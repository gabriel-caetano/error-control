{"version":3,"sources":["components/InputHamming/index.jsx","components/InputBiDimensional/index.jsx","components/Output/index.jsx","utils/hamming.js","utils/bidimensional.js","App.js","index.js"],"names":["ContainerStyle","padding","display","justifyContent","CardStyle","width","textAlign","InputStyle","marginBottom","maxWidth","minWidth","verticalAlign","Input","submit","useState","data","setData","Container","style","Card","CardContent","Typography","fontSize","color","FormControl","margin","TextField","value","onChange","e","fail","test","target","clean","match","label","chunk","setChunk","event","type","InputProps","inputProps","min","max","maxWidt","ResStyle","fontFamily","overflow","Output","input","output","hamming","length","currPow","count","inputChar","arrRes","push","map","char","idx","sum","i","Number","join","bidimensional","size","parseInt","chunks","substring","last","repeat","ret_input","split","reduce","a","b","str","j","AppStyle","backgroundColor","minHeight","flexDirection","App","hammingEncodedData","setHammingEncodedData","biDimensionalEncodedData","setBiDimensionalEncodedData","updateHamingData","newData","updateBiDimensionalData","InputHamming","InputBiDimensional","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.67b24f8b.chunk.js","sourcesContent":["// import './index.css'\r\nimport {\r\n  Container,\r\n  TextField,\r\n  Card,\r\n  FormControl,\r\n  CardContent,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { useState } from \"react\";\r\n\r\nconst ContainerStyle = {\r\n  padding: \"1rem 0 0\",\r\n  display: \"flex\",\r\n  justifyContent: \"center\",\r\n};\r\n\r\nconst CardStyle = {\r\n  width: \"260px\",\r\n  padding: \"0 40px 0\",\r\n  textAlign: \"center\",\r\n};\r\n\r\nconst InputStyle = {\r\n  marginBottom: \"15px\",\r\n  maxWidth: \"100%\",\r\n  minWidth: \"80px\",\r\n  width: \"100%\",\r\n  verticalAlign: \"text-bottom\",\r\n};\r\n\r\nfunction Input({ submit }) {\r\n  const [data, setData] = useState(\"\");\r\n\r\n  const handleBinaryInput = (e) => {\r\n    const nonBinary = /[^0-1]+/g;\r\n    const binary = /[01]*/g;\r\n    const fail = nonBinary.test(e.target.value);\r\n    const clean = e.target.value.match(binary);\r\n    if (!fail) submit(clean[0]);\r\n    setData(clean[0]);\r\n  };\r\n  return (\r\n    <Container style={ContainerStyle}>\r\n      <Card style={CardStyle}>\r\n        <CardContent>\r\n          <Typography style={{ fontSize: 16 }} color=\"textPrimary\">\r\n            Código de Hamming\r\n          </Typography>\r\n          <FormControl style={{ margin: 0, width: \"100%\" }}>\r\n            <TextField\r\n              value={data}\r\n              onChange={handleBinaryInput}\r\n              style={InputStyle}\r\n              label=\"Sinal de entrada\"\r\n            />\r\n          </FormControl>\r\n        </CardContent>\r\n      </Card>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Input;\r\n","// import './index.css'\r\nimport {\r\n  Container,\r\n  TextField,\r\n  Card,\r\n  FormControl,\r\n  CardContent,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { useState } from \"react\";\r\n\r\nconst ContainerStyle = {\r\n  padding: \"1rem 0 0\",\r\n  display: \"flex\",\r\n  justifyContent: \"center\",\r\n};\r\n\r\nconst CardStyle = {\r\n  width: \"260px\",\r\n  padding: \"0 40px 0\",\r\n  textAlign: \"center\",\r\n};\r\n\r\nconst InputStyle = {\r\n  marginBottom: \"15px\",\r\n  maxWidth: \"100%\",\r\n  minWidth: \"80px\",\r\n  width: \"100%\",\r\n  verticalAlign: \"text-bottom\",\r\n};\r\n\r\nfunction Input({ submit }) {\r\n  const [data, setData] = useState(\"\");\r\n  const [chunk, setChunk] = useState(1);\r\n\r\n  const handleBinaryInput = (e) => {\r\n    const nonBinary = /[^0-1]+/g;\r\n    const binary = /[01]*/g;\r\n    const fail = nonBinary.test(e.target.value);\r\n    const clean = e.target.value.match(binary);\r\n    if (!fail) submit(clean[0], chunk);\r\n    setData(clean[0]);\r\n  };\r\n  return (\r\n    <Container style={ContainerStyle}>\r\n      <Card style={CardStyle}>\r\n        <CardContent>\r\n          <Typography style={{ fontSize: 16 }} color=\"textPrimary\">\r\n            Paridade Bi-Dimensional\r\n          </Typography>\r\n          <FormControl style={{ margin: 0, width: \"100%\" }}>\r\n            <TextField\r\n              value={data}\r\n              onChange={handleBinaryInput}\r\n              style={InputStyle}\r\n              label=\"Sinal de entrada\"\r\n            />\r\n            <TextField\r\n              value={chunk}\r\n              onChange={(event) => {\r\n                const value = event.target.value;\r\n                setChunk(value);\r\n                submit(data, value);\r\n              }}\r\n              type=\"number\"\r\n              InputProps={{ inputProps: { min: 1, max: 16 } }}\r\n              style={{\r\n                ...InputStyle,\r\n                maxWidth: \"60%\",\r\n                margin: \"auto\",\r\n              }}\r\n              label=\"Tamanho do bloco\"\r\n            />\r\n          </FormControl>\r\n        </CardContent>\r\n      </Card>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Input;\r\n","import { Container, Card, Typography } from \"@material-ui/core\";\r\n\r\nconst ContainerStyle = {\r\n  maxWidt: \"100%\",\r\n  padding: \"2rem 0\",\r\n  display: \"flex\",\r\n  justifyContent: \"center\",\r\n};\r\n\r\nconst CardStyle = {\r\n  padding: \"20px 40px\",\r\n};\r\n\r\nconst ResStyle = {\r\n  fontFamily: \"monospace\",\r\n  overflow: \"auto\",\r\n};\r\n\r\nfunction Output({ input, output }) {\r\n  return (\r\n    <Container style={ContainerStyle}>\r\n      <Card style={CardStyle}>\r\n        {input === \"\" ? (\r\n          <Typography style={{ textAlign: \"center\" }}>\r\n            Digite um valor para realizar a conversão.\r\n          </Typography>\r\n        ) : (\r\n          <div style={ResStyle}>\r\n            <p>Input : {input}</p>\r\n            <p>Output: {output}</p>\r\n          </div>\r\n        )}\r\n      </Card>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Output;\r\n","export default function hamming(input) {\r\n  if (input.length > 0) {\r\n    let currPow = 1;\r\n    let count = 1;\r\n    let inputChar = 0;\r\n    const arrRes = [];\r\n    while (true) {\r\n      if (input.length <= inputChar) break;\r\n      if (count === currPow) {\r\n        arrRes.push(\"_\");\r\n        currPow *= 2;\r\n      } else {\r\n        arrRes.push(input[inputChar]);\r\n        inputChar++;\r\n      }\r\n      count++;\r\n    }\r\n    currPow = 1;\r\n    const output = arrRes.map((char, idx) => {\r\n      if (idx + 1 === currPow) {\r\n        let sum = 0;\r\n        for (let i = currPow + 1; i <= arrRes.length; i++) {\r\n          // para fazer parte da soma o módulo da potência seguinte\r\n          // deve resultar em um valor maior do que a potência atual\r\n          if (i % (2 * currPow) >= currPow) {\r\n            sum += Number(arrRes[i - 1]);\r\n          }\r\n        }\r\n        currPow *= 2;\r\n        return sum % 2;\r\n      } else {\r\n        return char;\r\n      }\r\n    });\r\n    const res = { input: arrRes.join(\"\"), output: output.join(\"\") };\r\n    return res;\r\n  }\r\n  return { input: \"\", output: \"\" };\r\n}\r\n","export default function bidimensional(input, size) {\r\n  if (input.length > 0) {\r\n    size = parseInt(size);\r\n    const chunks = [];\r\n    for (let i = 0; i < input.length; i += size) {\r\n      chunks.push(input.substring(i, i + size));\r\n    }\r\n    const last = chunks.length - 1;\r\n    chunks[last] += \"0\".repeat(size - chunks[last].length);\r\n    const ret_input = chunks.join(\" \");\r\n    for (const i in chunks) {\r\n      const count =\r\n        chunks[i].split(\"\").reduce((a, b) => {\r\n          return parseInt(a) + parseInt(b);\r\n        }) % 2;\r\n      chunks[i] = chunks[i] + count;\r\n    }\r\n    let str = \"\";\r\n    for (let i = 0; i < size + 1; i++) {\r\n      let count = 0;\r\n      for (let j in chunks) {\r\n        count += parseInt(chunks[j][i]);\r\n      }\r\n      str += count % 2;\r\n    }\r\n    chunks.push(str);\r\n\r\n    return { input: ret_input, output: chunks.join(\" \") };\r\n  }\r\n  return { input: \"\", output: \"\" };\r\n}\r\n","import { useState } from 'react';\r\nimport { Container } from '@material-ui/core';\r\nimport InputHamming from './components/InputHamming';\r\nimport InputBiDimensional from './components/InputBiDimensional';\r\nimport Output from './components/Output';\r\nimport hamming from './utils/hamming';\r\nimport bidimensional from './utils/bidimensional';\r\nconst AppStyle = {\r\n  backgroundColor: '#CCC',\r\n  maxWidth: '100vw',\r\n  minHeight: '100vh',\r\n  display: 'flex',\r\n  flexDirection: 'column',\r\n};\r\n\r\nfunction App() {\r\n  const [hammingEncodedData, setHammingEncodedData] = useState({ input: '', output: '' });\r\n  const [biDimensionalEncodedData, setBiDimensionalEncodedData] = useState({ input: '', output: '' });\r\n\r\n  const updateHamingData = async (data) => {\r\n    const newData = await hamming(data);\r\n    setHammingEncodedData(newData);\r\n  };\r\n  const updateBiDimensionalData = async (data, chunk) => {\r\n    const newData = await bidimensional(data, chunk);\r\n    setBiDimensionalEncodedData(newData)\r\n  };\r\n\r\n  return (\r\n    <Container style={AppStyle}>\r\n      <InputHamming submit={updateHamingData} />\r\n      <Output input={hammingEncodedData.input} output={hammingEncodedData.output} />\r\n      <InputBiDimensional submit={updateBiDimensionalData} />\r\n      <Output input={biDimensionalEncodedData.input} output={biDimensionalEncodedData.output} />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}