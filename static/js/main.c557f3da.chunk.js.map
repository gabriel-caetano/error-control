{"version":3,"sources":["components/Input/index.jsx","components/Output/index.jsx","utils/hamming.js","App.js","index.js"],"names":["ContainerStyle","padding","display","justifyContent","CardStyle","width","textAlign","InputStyle","marginBottom","maxWidth","minWidth","verticalAlign","Input","submit","useState","data","setData","Container","style","Card","CardContent","Typography","fontSize","color","FormControl","margin","TextField","value","onChange","e","fail","test","target","clean","match","label","maxWidt","ResStyle","fontFamily","Output","input","output","hamming","length","currPow","count","inputChar","arrRes","push","map","char","idx","sum","i","Number","join","AppStyle","backgroundColor","minHeight","flexDirection","App","encodedData","setEncodedData","updateData","a","newData","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QAIMA,EAAiB,CACrBC,QAAS,WACTC,QAAS,OACTC,eAAgB,UAGZC,EAAY,CAChBC,MAAO,QACPJ,QAAS,WACTK,UAAW,UAGPC,EAAa,CACjBC,aAAc,OACdC,SAAU,OACVC,SAAU,OACVL,MAAO,OACPM,cAAe,eA+BFC,MA5Bf,YAA0B,IAAVC,EAAS,EAATA,OAAS,EACCC,mBAAS,IADV,mBAChBC,EADgB,KACVC,EADU,KAYvB,OACE,cAACC,EAAA,EAAD,CAAWC,MAAOlB,EAAlB,SACE,cAACmB,EAAA,EAAD,CAAMD,MAAOd,EAAb,SACE,eAACgB,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYH,MAAO,CAAEI,SAAU,IAAMC,MAAM,cAA3C,kCAGA,cAACC,EAAA,EAAD,CAAaN,MAAO,CAAEO,OAAQ,EAAGpB,MAAO,QAAxC,SACE,cAACqB,EAAA,EAAD,CAAWC,MAAOZ,EAAMa,SAjBR,SAACC,GACzB,IAEMC,EAFY,WAEKC,KAAKF,EAAEG,OAAOL,OAC/BM,EAAQJ,EAAEG,OAAOL,MAAMO,MAFd,UAGVJ,GACHjB,EAAOoB,EAAM,IACbjB,EAAQiB,EAAM,KAU6Cf,MAAOX,EAAY4B,MAAM,+BC1CpFnC,EAAiB,CACrBoC,QAAS,OACTnC,QAAS,SACTC,QAAS,OACTC,eAAgB,UAGZC,EAAY,CAChBH,QAAS,aAGLoC,EAAU,CACdC,WAAY,aAyBCC,MArBf,YAAkC,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,OACtB,OACE,cAACxB,EAAA,EAAD,CAAWC,MAAOlB,EAAlB,SACE,cAACmB,EAAA,EAAD,CAAMD,MAAOd,EAAb,SAEc,KAAVoC,EACE,cAACnB,EAAA,EAAD,CAAYH,MAAO,CAAEZ,UAAW,UAAhC,2DAIA,sBAAKY,MAAOmB,EAAZ,UACE,yCAAYG,KACZ,yCAAYC,aC9BX,SAASC,EAAQF,GAC9B,GAAIA,EAAMG,OAAS,EAAG,CAKpB,IAJA,IAAIC,EAAU,EACVC,EAAQ,EACRC,EAAY,EACVC,EAAS,KAETP,EAAMG,QAAUG,IAChBD,IAAUD,GACZG,EAAOC,KAAK,KACZJ,GAAW,IAEXG,EAAOC,KAAKR,EAAMM,IAClBA,KAEFD,IAEFD,EAAU,EACV,IAAMH,EAASM,EAAOE,KAAI,SAACC,EAAMC,GAC/B,GAAIA,EAAM,IAAMP,EAAS,CAEvB,IADA,IAAIQ,EAAM,EACDC,EAAIT,EAAU,EAAGS,GAAKN,EAAOJ,OAAQU,IAGxCA,GAAK,EAAIT,IAAYA,IACvBQ,GAAOE,OAAOP,EAAOM,EAAI,KAI7B,OADAT,GAAW,EACJQ,EAAM,EAEb,OAAOF,KAIX,MADY,CAAEV,MAAOO,EAAOQ,KAAK,IAAKd,OAAQA,EAAOc,KAAK,KAG5D,MAAO,CAAEf,MAAO,GAAIC,OAAQ,IChC9B,IAAMe,EAAW,CACfC,gBAAiB,OACjBhD,SAAU,QACViD,UAAW,QACXxD,QAAS,OACTyD,cAAe,UAkBFC,MAff,WAAgB,IAAD,EACyB9C,mBAAS,CAAE0B,MAAO,GAAIC,OAAQ,KADvD,mBACNoB,EADM,KACOC,EADP,KAGPC,EAAU,uCAAG,WAAOhD,GAAP,eAAAiD,EAAA,sEACKtB,EAAQ3B,GADb,OACXkD,EADW,OAEjBH,EAAeG,GAFE,2CAAH,sDAIhB,OACE,eAAChD,EAAA,EAAD,CAAWC,MAAOsC,EAAlB,UACE,cAAC,EAAD,CAAO3C,OAAQkD,IACf,cAAC,EAAD,CAAQvB,MAAOqB,EAAYrB,MAAOC,OAAQoB,EAAYpB,a,MClB5DyB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c557f3da.chunk.js","sourcesContent":["// import './index.css'\r\nimport { Container, TextField, Card, FormControl, CardContent, Typography } from '@material-ui/core'\r\nimport { useState } from 'react'\r\n\r\nconst ContainerStyle = {\r\n  padding: '1rem 0 0',\r\n  display: 'flex',\r\n  justifyContent: 'center'\r\n}\r\n\r\nconst CardStyle = {\r\n  width: '260px',\r\n  padding: '0 40px 0',\r\n  textAlign: 'center'\r\n}\r\n\r\nconst InputStyle = {\r\n  marginBottom: '15px',\r\n  maxWidth: '100%',\r\n  minWidth: '80px',\r\n  width: '100%',\r\n  verticalAlign: 'text-bottom'\r\n}\r\n\r\nfunction Input({submit}) {\r\n  const [data, setData] = useState('')\r\n \r\n  const handleBinaryInput = (e) => {\r\n    const nonBinary = /[^0-1]+/g\r\n    const binary = /[01]*/g\r\n    const fail = nonBinary.test(e.target.value)\r\n    const clean = e.target.value.match(binary)\r\n    if (!fail)\r\n      submit(clean[0])\r\n      setData(clean[0])\r\n  }\r\n  return (\r\n    <Container style={ContainerStyle}>\r\n      <Card style={CardStyle}>\r\n        <CardContent>\r\n          <Typography style={{ fontSize: 16 }} color=\"textPrimary\">\r\n            Código de Hamming\r\n          </Typography>\r\n          <FormControl style={{ margin: 0, width: '100%'}}>\r\n            <TextField value={data} onChange={handleBinaryInput} style={InputStyle} label=\"Sinal de entrada\" />\r\n          </FormControl>\r\n        </CardContent>\r\n      </Card>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Input;\r\n","import { Container, Card, Typography } from '@material-ui/core'\r\n\r\nconst ContainerStyle = {\r\n  maxWidt: '100%',\r\n  padding: '2rem 0',\r\n  display: 'flex',\r\n  justifyContent: 'center'\r\n}\r\n\r\nconst CardStyle = {\r\n  padding: '20px 40px',\r\n}\r\n\r\nconst ResStyle ={\r\n  fontFamily: 'monospace'\r\n}\r\n\r\n\r\nfunction Output({input, output}) {\r\n  return (\r\n    <Container style={ContainerStyle}>\r\n      <Card style={CardStyle}>\r\n        {\r\n          input === '' ? (\r\n            <Typography style={{ textAlign: 'center' }}>\r\n              Digite um valor para realizar a conversão.\r\n            </Typography>\r\n          ) : (\r\n            <div style={ResStyle}>\r\n              <p>Input : {input}</p>\r\n              <p>Output: {output}</p>\r\n            </div>\r\n          )\r\n        }\r\n      </Card>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Output;\r\n","export default function hamming(input) {\r\n  if (input.length > 0) {\r\n    let currPow = 1;\r\n    let count = 1;\r\n    let inputChar = 0;\r\n    const arrRes = [];\r\n    while (true) {\r\n      if (input.length <= inputChar) break;\r\n      if (count === currPow) {\r\n        arrRes.push('_');\r\n        currPow *= 2;\r\n      } else {\r\n        arrRes.push(input[inputChar]);\r\n        inputChar++;\r\n      }\r\n      count++;\r\n    }\r\n    currPow = 1;\r\n    const output = arrRes.map((char, idx) => {\r\n      if (idx + 1 === currPow) {\r\n        let sum = 0;\r\n        for (let i = currPow + 1; i <= arrRes.length; i++) {\r\n          // para fazer parte da soma o módulo da potência seguinte\r\n          // deve resultar em um valor maior do que a potência atual\r\n          if (i % (2 * currPow) >= currPow) {\r\n            sum += Number(arrRes[i - 1]);\r\n          }\r\n        }\r\n        currPow *= 2;\r\n        return sum % 2;\r\n      } else {\r\n        return char;\r\n      }\r\n    });\r\n    const res = { input: arrRes.join(''), output: output.join('') };\r\n    return res;\r\n  }\r\n  return { input: '', output: '' };\r\n}\r\n","import { useState } from 'react';\r\nimport { Container } from '@material-ui/core';\r\nimport Input from './components/Input';\r\nimport Output from './components/Output';\r\nimport hamming from './utils/hamming';\r\nconst AppStyle = {\r\n  backgroundColor: '#CCC',\r\n  maxWidth: '100vw',\r\n  minHeight: '100vh',\r\n  display: 'flex',\r\n  flexDirection: 'column',\r\n};\r\n\r\nfunction App() {\r\n  const [encodedData, setEncodedData] = useState({ input: '', output: '' });\r\n\r\n  const updateData = async (data) => {\r\n    const newData = await hamming(data);\r\n    setEncodedData(newData);\r\n  };\r\n  return (\r\n    <Container style={AppStyle}>\r\n      <Input submit={updateData} />\r\n      <Output input={encodedData.input} output={encodedData.output} />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}